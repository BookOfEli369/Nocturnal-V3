using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.UI;
using Nocturnal.Settings.wrappers;
using System.Collections;
using VRC;

namespace Nocturnal.exploits
{
    internal class playerlist
    {
        internal static IEnumerator playerlistm()
        {
            while (true)
            {

                if (Settings.ConfigVars.playerlist)
                {
                    Ui.Qm_basic.playerlisttext.text = "";

                    var player = PlayerManager.prop_PlayerManager_0.field_Private_List_1_Player_0;
                    for (int i = 0; i < player.Count; i++)
                    {
                        try
                        {
                            string vr = player[i].prop_VRCPlayerApi_0.IsUserInVR() ? "<color=#c1a8ff>VR</color>" : "<color=#ff0000>VR</color>";
                            string platform = player[i].field_Private_APIUser_0.last_platform != "standalonewindows" ? "<color=#7dffaa>[Quest]</color>" : "<color=#7d88ff>[PC]</color>";
                            string Room = player[i].prop_VRCPlayerApi_0.isMaster ? "[<color=#ff0a3b>M</color>] " : "";
                            string friends = player[i].IsFriend() ? "[<color=yellow>Friend</color>] " : "";
                            float fps = player[i].prop_PlayerNet_0.prop_Byte_0 != 0 ? 1000 / player[i].prop_PlayerNet_0.prop_Byte_0 : 0;
                            Color clr = Color.white;
                            string ranktext = "";
                            var username = player[i].field_Private_APIUser_0.displayName;
                            Ranks.gettrsutrank(player[i].field_Private_APIUser_0, ref ranktext, ref clr);
                            Ranks.convertotcolorank(ref ranktext, ref username);
                            Ui.Qm_basic.playerlisttext.text += $"[{i}]{Room}{friends}[{ranktext}] [{username}] [{platform}] [{vr}] [<color=#5967ff>P</color>:<color=#1c2fff>{player[i].prop_PlayerNet_0.field_Private_Int16_0}</color>] [<color=#edffbf>F</color>:<color=#ddff87>{fps}</color>]\n";
                        }
                        catch { }
                    }
                }
             
                yield return new WaitForSeconds(1.1f);
            }
        }

    }
}
