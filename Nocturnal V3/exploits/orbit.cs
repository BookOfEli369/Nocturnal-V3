using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using Nocturnal.Settings.wrappers;
namespace Nocturnal.Exploits
{
    internal class Orbit
    {
        internal static GameObject orbitobject = null;
        private static float gapvalue = 0.1f;
        private static bool isobt = false;

        internal static void orbituser()
        {
            if (orbitobject == null)
                return;

            if (Target.targertuser == null)
                return;
            try
            {
                orbitobject.transform.position = Target.targertuser.prop_VRCPlayer_1.field_Internal_Animator_0.GetBoneTransform(HumanBodyBones.Head).position;

            }
            catch { return; }
            if (isobt)
            {
                gapvalue += 1.5f * Time.deltaTime;
                if (gapvalue > 3)
                    isobt = false;
            }
            else
            {
                gapvalue -= 1.5f * Time.deltaTime;
                if (gapvalue < 0.1)
                    isobt = true;
            }

            for (int i = 0; i < Pickups.Pickupsobs.Length; i++)
            {
                VRC.SDKBase.Networking.SetOwner(VRC.Player.prop_Player_0.field_Private_VRCPlayerApi_0, Pickups.Pickupsobs[i].gameObject);
                orbitobject.transform.Rotate(new Vector3(0,360 / Pickups.Pickupsobs.Length  , 0));
                Pickups.Pickupsobs[i].transform.position = orbitobject.transform.position + orbitobject.transform.forward * gapvalue;
                Pickups.Pickupsobs[i].transform.LookAt(orbitobject.transform);
               // orbitobject.transform.localEulerAngles = new Vector3(0, orbitobject.transform.localEulerAngles.y + 5 / (gapvalue * 200), 0);
            }


        }
    }
}
